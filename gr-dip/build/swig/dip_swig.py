# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dip_swig', [dirname(__file__)])
        except ImportError:
            import _dip_swig
            return _dip_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_dip_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dip_swig = swig_import_helper()
    del swig_import_helper
else:
    import _dip_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _dip_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _dip_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _dip_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _dip_swig.high_res_timer_epoch()
class image_source(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dip::image_source.

    To avoid accidental use of raw pointers, dip::image_source's constructor is in a private implementation class. dip::image_source::make is the public interface for creating new instances.

    Args:
        filename : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(char const * filename) -> image_source_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dip::image_source.

        To avoid accidental use of raw pointers, dip::image_source's constructor is in a private implementation class. dip::image_source::make is the public interface for creating new instances.

        Args:
            filename : 
        """
        return _dip_swig.image_source_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _dip_swig.delete_image_source
    __del__ = lambda self : None;
image_source_swigregister = _dip_swig.image_source_swigregister
image_source_swigregister(image_source)

def image_source_make(*args, **kwargs):
  """
    image_source_make(char const * filename) -> image_source_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dip::image_source.

    To avoid accidental use of raw pointers, dip::image_source's constructor is in a private implementation class. dip::image_source::make is the public interface for creating new instances.

    Args:
        filename : 
    """
  return _dip_swig.image_source_make(*args, **kwargs)

class image_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dip::image_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::dip::image_source)> self) -> image_source_sptr
        __init__(boost::shared_ptr<(gr::dip::image_source)> self, image_source p) -> image_source_sptr
        """
        this = _dip_swig.new_image_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(image_source_sptr self) -> image_source"""
        return _dip_swig.image_source_sptr___deref__(self)

    __swig_destroy__ = _dip_swig.delete_image_source_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(image_source_sptr self, char const * filename) -> image_source_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dip::image_source.

        To avoid accidental use of raw pointers, dip::image_source's constructor is in a private implementation class. dip::image_source::make is the public interface for creating new instances.

        Args:
            filename : 
        """
        return _dip_swig.image_source_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(image_source_sptr self) -> unsigned int"""
        return _dip_swig.image_source_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(image_source_sptr self, int which, int delay)
        declare_sample_delay(image_source_sptr self, unsigned int delay)
        """
        return _dip_swig.image_source_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(image_source_sptr self, int which) -> unsigned int"""
        return _dip_swig.image_source_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(image_source_sptr self) -> int"""
        return _dip_swig.image_source_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(image_source_sptr self) -> double"""
        return _dip_swig.image_source_sptr_relative_rate(self)

    def start(self):
        """start(image_source_sptr self) -> bool"""
        return _dip_swig.image_source_sptr_start(self)

    def stop(self):
        """stop(image_source_sptr self) -> bool"""
        return _dip_swig.image_source_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(image_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _dip_swig.image_source_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(image_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _dip_swig.image_source_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(image_source_sptr self) -> int"""
        return _dip_swig.image_source_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(image_source_sptr self, int m)"""
        return _dip_swig.image_source_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(image_source_sptr self)"""
        return _dip_swig.image_source_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(image_source_sptr self) -> bool"""
        return _dip_swig.image_source_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(image_source_sptr self, int m)"""
        return _dip_swig.image_source_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(image_source_sptr self) -> int"""
        return _dip_swig.image_source_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(image_source_sptr self, int i) -> long"""
        return _dip_swig.image_source_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(image_source_sptr self, long max_output_buffer)
        set_max_output_buffer(image_source_sptr self, int port, long max_output_buffer)
        """
        return _dip_swig.image_source_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(image_source_sptr self, int i) -> long"""
        return _dip_swig.image_source_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(image_source_sptr self, long min_output_buffer)
        set_min_output_buffer(image_source_sptr self, int port, long min_output_buffer)
        """
        return _dip_swig.image_source_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(image_source_sptr self) -> float"""
        return _dip_swig.image_source_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(image_source_sptr self) -> float"""
        return _dip_swig.image_source_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(image_source_sptr self) -> float"""
        return _dip_swig.image_source_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(image_source_sptr self) -> float"""
        return _dip_swig.image_source_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(image_source_sptr self) -> float"""
        return _dip_swig.image_source_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(image_source_sptr self) -> float"""
        return _dip_swig.image_source_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(image_source_sptr self, int which) -> float
        pc_input_buffers_full(image_source_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_source_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(image_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(image_source_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_source_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(image_source_sptr self, int which) -> float
        pc_input_buffers_full_var(image_source_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_source_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(image_source_sptr self, int which) -> float
        pc_output_buffers_full(image_source_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_source_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(image_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(image_source_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_source_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(image_source_sptr self, int which) -> float
        pc_output_buffers_full_var(image_source_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_source_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(image_source_sptr self) -> float"""
        return _dip_swig.image_source_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(image_source_sptr self) -> float"""
        return _dip_swig.image_source_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(image_source_sptr self) -> float"""
        return _dip_swig.image_source_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(image_source_sptr self) -> float"""
        return _dip_swig.image_source_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(image_source_sptr self) -> float"""
        return _dip_swig.image_source_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(image_source_sptr self, std::vector< std::size_t,std::allocator< std::size_t > > const & mask)"""
        return _dip_swig.image_source_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(image_source_sptr self)"""
        return _dip_swig.image_source_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(image_source_sptr self) -> std::vector< std::size_t,std::allocator< std::size_t > >"""
        return _dip_swig.image_source_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(image_source_sptr self) -> int"""
        return _dip_swig.image_source_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(image_source_sptr self) -> int"""
        return _dip_swig.image_source_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(image_source_sptr self, int priority) -> int"""
        return _dip_swig.image_source_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(image_source_sptr self) -> std::string"""
        return _dip_swig.image_source_sptr_name(self)

    def symbol_name(self):
        """symbol_name(image_source_sptr self) -> std::string"""
        return _dip_swig.image_source_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(image_source_sptr self) -> io_signature_sptr"""
        return _dip_swig.image_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(image_source_sptr self) -> io_signature_sptr"""
        return _dip_swig.image_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(image_source_sptr self) -> long"""
        return _dip_swig.image_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(image_source_sptr self) -> basic_block_sptr"""
        return _dip_swig.image_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(image_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _dip_swig.image_source_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(image_source_sptr self) -> std::string"""
        return _dip_swig.image_source_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(image_source_sptr self, std::string name)"""
        return _dip_swig.image_source_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(image_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dip_swig.image_source_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(image_source_sptr self) -> swig_int_ptr"""
        return _dip_swig.image_source_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(image_source_sptr self) -> swig_int_ptr"""
        return _dip_swig.image_source_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(image_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dip_swig.image_source_sptr_message_subscribers(self, *args, **kwargs)

image_source_sptr_swigregister = _dip_swig.image_source_sptr_swigregister
image_source_sptr_swigregister(image_source_sptr)

image_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
image_source = image_source.make;

class image_sink(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dip::image_sink.

    To avoid accidental use of raw pointers, dip::image_sink's constructor is in a private implementation class. dip::image_sink::make is the public interface for creating new instances.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> image_sink_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dip::image_sink.

        To avoid accidental use of raw pointers, dip::image_sink's constructor is in a private implementation class. dip::image_sink::make is the public interface for creating new instances.
        """
        return _dip_swig.image_sink_make()

    make = staticmethod(make)
    __swig_destroy__ = _dip_swig.delete_image_sink
    __del__ = lambda self : None;
image_sink_swigregister = _dip_swig.image_sink_swigregister
image_sink_swigregister(image_sink)

def image_sink_make():
  """
    image_sink_make() -> image_sink_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dip::image_sink.

    To avoid accidental use of raw pointers, dip::image_sink's constructor is in a private implementation class. dip::image_sink::make is the public interface for creating new instances.
    """
  return _dip_swig.image_sink_make()

class image_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dip::image_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::dip::image_sink)> self) -> image_sink_sptr
        __init__(boost::shared_ptr<(gr::dip::image_sink)> self, image_sink p) -> image_sink_sptr
        """
        this = _dip_swig.new_image_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(image_sink_sptr self) -> image_sink"""
        return _dip_swig.image_sink_sptr___deref__(self)

    __swig_destroy__ = _dip_swig.delete_image_sink_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(image_sink_sptr self) -> image_sink_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dip::image_sink.

        To avoid accidental use of raw pointers, dip::image_sink's constructor is in a private implementation class. dip::image_sink::make is the public interface for creating new instances.
        """
        return _dip_swig.image_sink_sptr_make(self)

    def history(self):
        """history(image_sink_sptr self) -> unsigned int"""
        return _dip_swig.image_sink_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(image_sink_sptr self, int which, int delay)
        declare_sample_delay(image_sink_sptr self, unsigned int delay)
        """
        return _dip_swig.image_sink_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(image_sink_sptr self, int which) -> unsigned int"""
        return _dip_swig.image_sink_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(image_sink_sptr self) -> int"""
        return _dip_swig.image_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(image_sink_sptr self) -> double"""
        return _dip_swig.image_sink_sptr_relative_rate(self)

    def start(self):
        """start(image_sink_sptr self) -> bool"""
        return _dip_swig.image_sink_sptr_start(self)

    def stop(self):
        """stop(image_sink_sptr self) -> bool"""
        return _dip_swig.image_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(image_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _dip_swig.image_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(image_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _dip_swig.image_sink_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(image_sink_sptr self) -> int"""
        return _dip_swig.image_sink_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(image_sink_sptr self, int m)"""
        return _dip_swig.image_sink_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(image_sink_sptr self)"""
        return _dip_swig.image_sink_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(image_sink_sptr self) -> bool"""
        return _dip_swig.image_sink_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(image_sink_sptr self, int m)"""
        return _dip_swig.image_sink_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(image_sink_sptr self) -> int"""
        return _dip_swig.image_sink_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(image_sink_sptr self, int i) -> long"""
        return _dip_swig.image_sink_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(image_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(image_sink_sptr self, int port, long max_output_buffer)
        """
        return _dip_swig.image_sink_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(image_sink_sptr self, int i) -> long"""
        return _dip_swig.image_sink_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(image_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(image_sink_sptr self, int port, long min_output_buffer)
        """
        return _dip_swig.image_sink_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(image_sink_sptr self) -> float"""
        return _dip_swig.image_sink_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(image_sink_sptr self) -> float"""
        return _dip_swig.image_sink_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(image_sink_sptr self) -> float"""
        return _dip_swig.image_sink_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(image_sink_sptr self) -> float"""
        return _dip_swig.image_sink_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(image_sink_sptr self) -> float"""
        return _dip_swig.image_sink_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(image_sink_sptr self) -> float"""
        return _dip_swig.image_sink_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(image_sink_sptr self, int which) -> float
        pc_input_buffers_full(image_sink_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_sink_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(image_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(image_sink_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_sink_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(image_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(image_sink_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_sink_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(image_sink_sptr self, int which) -> float
        pc_output_buffers_full(image_sink_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_sink_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(image_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(image_sink_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_sink_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(image_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(image_sink_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_sink_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(image_sink_sptr self) -> float"""
        return _dip_swig.image_sink_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(image_sink_sptr self) -> float"""
        return _dip_swig.image_sink_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(image_sink_sptr self) -> float"""
        return _dip_swig.image_sink_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(image_sink_sptr self) -> float"""
        return _dip_swig.image_sink_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(image_sink_sptr self) -> float"""
        return _dip_swig.image_sink_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(image_sink_sptr self, std::vector< std::size_t,std::allocator< std::size_t > > const & mask)"""
        return _dip_swig.image_sink_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(image_sink_sptr self)"""
        return _dip_swig.image_sink_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(image_sink_sptr self) -> std::vector< std::size_t,std::allocator< std::size_t > >"""
        return _dip_swig.image_sink_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(image_sink_sptr self) -> int"""
        return _dip_swig.image_sink_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(image_sink_sptr self) -> int"""
        return _dip_swig.image_sink_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(image_sink_sptr self, int priority) -> int"""
        return _dip_swig.image_sink_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(image_sink_sptr self) -> std::string"""
        return _dip_swig.image_sink_sptr_name(self)

    def symbol_name(self):
        """symbol_name(image_sink_sptr self) -> std::string"""
        return _dip_swig.image_sink_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(image_sink_sptr self) -> io_signature_sptr"""
        return _dip_swig.image_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(image_sink_sptr self) -> io_signature_sptr"""
        return _dip_swig.image_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(image_sink_sptr self) -> long"""
        return _dip_swig.image_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(image_sink_sptr self) -> basic_block_sptr"""
        return _dip_swig.image_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(image_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _dip_swig.image_sink_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(image_sink_sptr self) -> std::string"""
        return _dip_swig.image_sink_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(image_sink_sptr self, std::string name)"""
        return _dip_swig.image_sink_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(image_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dip_swig.image_sink_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(image_sink_sptr self) -> swig_int_ptr"""
        return _dip_swig.image_sink_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(image_sink_sptr self) -> swig_int_ptr"""
        return _dip_swig.image_sink_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(image_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dip_swig.image_sink_sptr_message_subscribers(self, *args, **kwargs)

image_sink_sptr_swigregister = _dip_swig.image_sink_sptr_swigregister
image_sink_sptr_swigregister(image_sink_sptr)

image_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
image_sink = image_sink.make;

class image_save(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dip::image_save.

    To avoid accidental use of raw pointers, dip::image_save's constructor is in a private implementation class. dip::image_save::make is the public interface for creating new instances.

    Args:
        filename : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(char const * filename) -> image_save_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dip::image_save.

        To avoid accidental use of raw pointers, dip::image_save's constructor is in a private implementation class. dip::image_save::make is the public interface for creating new instances.

        Args:
            filename : 
        """
        return _dip_swig.image_save_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _dip_swig.delete_image_save
    __del__ = lambda self : None;
image_save_swigregister = _dip_swig.image_save_swigregister
image_save_swigregister(image_save)

def image_save_make(*args, **kwargs):
  """
    image_save_make(char const * filename) -> image_save_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dip::image_save.

    To avoid accidental use of raw pointers, dip::image_save's constructor is in a private implementation class. dip::image_save::make is the public interface for creating new instances.

    Args:
        filename : 
    """
  return _dip_swig.image_save_make(*args, **kwargs)

class image_save_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dip::image_save)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::dip::image_save)> self) -> image_save_sptr
        __init__(boost::shared_ptr<(gr::dip::image_save)> self, image_save p) -> image_save_sptr
        """
        this = _dip_swig.new_image_save_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(image_save_sptr self) -> image_save"""
        return _dip_swig.image_save_sptr___deref__(self)

    __swig_destroy__ = _dip_swig.delete_image_save_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(image_save_sptr self, char const * filename) -> image_save_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dip::image_save.

        To avoid accidental use of raw pointers, dip::image_save's constructor is in a private implementation class. dip::image_save::make is the public interface for creating new instances.

        Args:
            filename : 
        """
        return _dip_swig.image_save_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(image_save_sptr self) -> unsigned int"""
        return _dip_swig.image_save_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(image_save_sptr self, int which, int delay)
        declare_sample_delay(image_save_sptr self, unsigned int delay)
        """
        return _dip_swig.image_save_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(image_save_sptr self, int which) -> unsigned int"""
        return _dip_swig.image_save_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(image_save_sptr self) -> int"""
        return _dip_swig.image_save_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(image_save_sptr self) -> double"""
        return _dip_swig.image_save_sptr_relative_rate(self)

    def start(self):
        """start(image_save_sptr self) -> bool"""
        return _dip_swig.image_save_sptr_start(self)

    def stop(self):
        """stop(image_save_sptr self) -> bool"""
        return _dip_swig.image_save_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(image_save_sptr self, unsigned int which_input) -> uint64_t"""
        return _dip_swig.image_save_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(image_save_sptr self, unsigned int which_output) -> uint64_t"""
        return _dip_swig.image_save_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(image_save_sptr self) -> int"""
        return _dip_swig.image_save_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(image_save_sptr self, int m)"""
        return _dip_swig.image_save_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(image_save_sptr self)"""
        return _dip_swig.image_save_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(image_save_sptr self) -> bool"""
        return _dip_swig.image_save_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(image_save_sptr self, int m)"""
        return _dip_swig.image_save_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(image_save_sptr self) -> int"""
        return _dip_swig.image_save_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(image_save_sptr self, int i) -> long"""
        return _dip_swig.image_save_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(image_save_sptr self, long max_output_buffer)
        set_max_output_buffer(image_save_sptr self, int port, long max_output_buffer)
        """
        return _dip_swig.image_save_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(image_save_sptr self, int i) -> long"""
        return _dip_swig.image_save_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(image_save_sptr self, long min_output_buffer)
        set_min_output_buffer(image_save_sptr self, int port, long min_output_buffer)
        """
        return _dip_swig.image_save_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(image_save_sptr self) -> float"""
        return _dip_swig.image_save_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(image_save_sptr self) -> float"""
        return _dip_swig.image_save_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(image_save_sptr self) -> float"""
        return _dip_swig.image_save_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(image_save_sptr self) -> float"""
        return _dip_swig.image_save_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(image_save_sptr self) -> float"""
        return _dip_swig.image_save_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(image_save_sptr self) -> float"""
        return _dip_swig.image_save_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(image_save_sptr self, int which) -> float
        pc_input_buffers_full(image_save_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_save_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(image_save_sptr self, int which) -> float
        pc_input_buffers_full_avg(image_save_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_save_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(image_save_sptr self, int which) -> float
        pc_input_buffers_full_var(image_save_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_save_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(image_save_sptr self, int which) -> float
        pc_output_buffers_full(image_save_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_save_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(image_save_sptr self, int which) -> float
        pc_output_buffers_full_avg(image_save_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_save_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(image_save_sptr self, int which) -> float
        pc_output_buffers_full_var(image_save_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_save_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(image_save_sptr self) -> float"""
        return _dip_swig.image_save_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(image_save_sptr self) -> float"""
        return _dip_swig.image_save_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(image_save_sptr self) -> float"""
        return _dip_swig.image_save_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(image_save_sptr self) -> float"""
        return _dip_swig.image_save_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(image_save_sptr self) -> float"""
        return _dip_swig.image_save_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(image_save_sptr self, std::vector< std::size_t,std::allocator< std::size_t > > const & mask)"""
        return _dip_swig.image_save_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(image_save_sptr self)"""
        return _dip_swig.image_save_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(image_save_sptr self) -> std::vector< std::size_t,std::allocator< std::size_t > >"""
        return _dip_swig.image_save_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(image_save_sptr self) -> int"""
        return _dip_swig.image_save_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(image_save_sptr self) -> int"""
        return _dip_swig.image_save_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(image_save_sptr self, int priority) -> int"""
        return _dip_swig.image_save_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(image_save_sptr self) -> std::string"""
        return _dip_swig.image_save_sptr_name(self)

    def symbol_name(self):
        """symbol_name(image_save_sptr self) -> std::string"""
        return _dip_swig.image_save_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(image_save_sptr self) -> io_signature_sptr"""
        return _dip_swig.image_save_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(image_save_sptr self) -> io_signature_sptr"""
        return _dip_swig.image_save_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(image_save_sptr self) -> long"""
        return _dip_swig.image_save_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(image_save_sptr self) -> basic_block_sptr"""
        return _dip_swig.image_save_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(image_save_sptr self, int ninputs, int noutputs) -> bool"""
        return _dip_swig.image_save_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(image_save_sptr self) -> std::string"""
        return _dip_swig.image_save_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(image_save_sptr self, std::string name)"""
        return _dip_swig.image_save_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(image_save_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dip_swig.image_save_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(image_save_sptr self) -> swig_int_ptr"""
        return _dip_swig.image_save_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(image_save_sptr self) -> swig_int_ptr"""
        return _dip_swig.image_save_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(image_save_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dip_swig.image_save_sptr_message_subscribers(self, *args, **kwargs)

image_save_sptr_swigregister = _dip_swig.image_save_sptr_swigregister
image_save_sptr_swigregister(image_save_sptr)

image_save_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
image_save = image_save.make;

class im2vec(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dip::im2vec.

    To avoid accidental use of raw pointers, dip::im2vec's constructor is in a private implementation class. dip::im2vec::make is the public interface for creating new instances.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> im2vec_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dip::im2vec.

        To avoid accidental use of raw pointers, dip::im2vec's constructor is in a private implementation class. dip::im2vec::make is the public interface for creating new instances.
        """
        return _dip_swig.im2vec_make()

    make = staticmethod(make)
    __swig_destroy__ = _dip_swig.delete_im2vec
    __del__ = lambda self : None;
im2vec_swigregister = _dip_swig.im2vec_swigregister
im2vec_swigregister(im2vec)

def im2vec_make():
  """
    im2vec_make() -> im2vec_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dip::im2vec.

    To avoid accidental use of raw pointers, dip::im2vec's constructor is in a private implementation class. dip::im2vec::make is the public interface for creating new instances.
    """
  return _dip_swig.im2vec_make()

class im2vec_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dip::im2vec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::dip::im2vec)> self) -> im2vec_sptr
        __init__(boost::shared_ptr<(gr::dip::im2vec)> self, im2vec p) -> im2vec_sptr
        """
        this = _dip_swig.new_im2vec_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(im2vec_sptr self) -> im2vec"""
        return _dip_swig.im2vec_sptr___deref__(self)

    __swig_destroy__ = _dip_swig.delete_im2vec_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(im2vec_sptr self) -> im2vec_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dip::im2vec.

        To avoid accidental use of raw pointers, dip::im2vec's constructor is in a private implementation class. dip::im2vec::make is the public interface for creating new instances.
        """
        return _dip_swig.im2vec_sptr_make(self)

    def history(self):
        """history(im2vec_sptr self) -> unsigned int"""
        return _dip_swig.im2vec_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(im2vec_sptr self, int which, int delay)
        declare_sample_delay(im2vec_sptr self, unsigned int delay)
        """
        return _dip_swig.im2vec_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(im2vec_sptr self, int which) -> unsigned int"""
        return _dip_swig.im2vec_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(im2vec_sptr self) -> int"""
        return _dip_swig.im2vec_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(im2vec_sptr self) -> double"""
        return _dip_swig.im2vec_sptr_relative_rate(self)

    def start(self):
        """start(im2vec_sptr self) -> bool"""
        return _dip_swig.im2vec_sptr_start(self)

    def stop(self):
        """stop(im2vec_sptr self) -> bool"""
        return _dip_swig.im2vec_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(im2vec_sptr self, unsigned int which_input) -> uint64_t"""
        return _dip_swig.im2vec_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(im2vec_sptr self, unsigned int which_output) -> uint64_t"""
        return _dip_swig.im2vec_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(im2vec_sptr self) -> int"""
        return _dip_swig.im2vec_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(im2vec_sptr self, int m)"""
        return _dip_swig.im2vec_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(im2vec_sptr self)"""
        return _dip_swig.im2vec_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(im2vec_sptr self) -> bool"""
        return _dip_swig.im2vec_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(im2vec_sptr self, int m)"""
        return _dip_swig.im2vec_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(im2vec_sptr self) -> int"""
        return _dip_swig.im2vec_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(im2vec_sptr self, int i) -> long"""
        return _dip_swig.im2vec_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(im2vec_sptr self, long max_output_buffer)
        set_max_output_buffer(im2vec_sptr self, int port, long max_output_buffer)
        """
        return _dip_swig.im2vec_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(im2vec_sptr self, int i) -> long"""
        return _dip_swig.im2vec_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(im2vec_sptr self, long min_output_buffer)
        set_min_output_buffer(im2vec_sptr self, int port, long min_output_buffer)
        """
        return _dip_swig.im2vec_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(im2vec_sptr self) -> float"""
        return _dip_swig.im2vec_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(im2vec_sptr self) -> float"""
        return _dip_swig.im2vec_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(im2vec_sptr self) -> float"""
        return _dip_swig.im2vec_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(im2vec_sptr self) -> float"""
        return _dip_swig.im2vec_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(im2vec_sptr self) -> float"""
        return _dip_swig.im2vec_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(im2vec_sptr self) -> float"""
        return _dip_swig.im2vec_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(im2vec_sptr self, int which) -> float
        pc_input_buffers_full(im2vec_sptr self) -> pmt_vector_float
        """
        return _dip_swig.im2vec_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(im2vec_sptr self, int which) -> float
        pc_input_buffers_full_avg(im2vec_sptr self) -> pmt_vector_float
        """
        return _dip_swig.im2vec_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(im2vec_sptr self, int which) -> float
        pc_input_buffers_full_var(im2vec_sptr self) -> pmt_vector_float
        """
        return _dip_swig.im2vec_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(im2vec_sptr self, int which) -> float
        pc_output_buffers_full(im2vec_sptr self) -> pmt_vector_float
        """
        return _dip_swig.im2vec_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(im2vec_sptr self, int which) -> float
        pc_output_buffers_full_avg(im2vec_sptr self) -> pmt_vector_float
        """
        return _dip_swig.im2vec_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(im2vec_sptr self, int which) -> float
        pc_output_buffers_full_var(im2vec_sptr self) -> pmt_vector_float
        """
        return _dip_swig.im2vec_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(im2vec_sptr self) -> float"""
        return _dip_swig.im2vec_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(im2vec_sptr self) -> float"""
        return _dip_swig.im2vec_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(im2vec_sptr self) -> float"""
        return _dip_swig.im2vec_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(im2vec_sptr self) -> float"""
        return _dip_swig.im2vec_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(im2vec_sptr self) -> float"""
        return _dip_swig.im2vec_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(im2vec_sptr self, std::vector< std::size_t,std::allocator< std::size_t > > const & mask)"""
        return _dip_swig.im2vec_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(im2vec_sptr self)"""
        return _dip_swig.im2vec_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(im2vec_sptr self) -> std::vector< std::size_t,std::allocator< std::size_t > >"""
        return _dip_swig.im2vec_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(im2vec_sptr self) -> int"""
        return _dip_swig.im2vec_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(im2vec_sptr self) -> int"""
        return _dip_swig.im2vec_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(im2vec_sptr self, int priority) -> int"""
        return _dip_swig.im2vec_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(im2vec_sptr self) -> std::string"""
        return _dip_swig.im2vec_sptr_name(self)

    def symbol_name(self):
        """symbol_name(im2vec_sptr self) -> std::string"""
        return _dip_swig.im2vec_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(im2vec_sptr self) -> io_signature_sptr"""
        return _dip_swig.im2vec_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(im2vec_sptr self) -> io_signature_sptr"""
        return _dip_swig.im2vec_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(im2vec_sptr self) -> long"""
        return _dip_swig.im2vec_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(im2vec_sptr self) -> basic_block_sptr"""
        return _dip_swig.im2vec_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(im2vec_sptr self, int ninputs, int noutputs) -> bool"""
        return _dip_swig.im2vec_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(im2vec_sptr self) -> std::string"""
        return _dip_swig.im2vec_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(im2vec_sptr self, std::string name)"""
        return _dip_swig.im2vec_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(im2vec_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dip_swig.im2vec_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(im2vec_sptr self) -> swig_int_ptr"""
        return _dip_swig.im2vec_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(im2vec_sptr self) -> swig_int_ptr"""
        return _dip_swig.im2vec_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(im2vec_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dip_swig.im2vec_sptr_message_subscribers(self, *args, **kwargs)

im2vec_sptr_swigregister = _dip_swig.im2vec_sptr_swigregister
im2vec_sptr_swigregister(im2vec_sptr)

im2vec_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
im2vec = im2vec.make;

class vec2im(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dip::vec2im.

    To avoid accidental use of raw pointers, dip::vec2im's constructor is in a private implementation class. dip::vec2im::make is the public interface for creating new instances.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> vec2im_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dip::vec2im.

        To avoid accidental use of raw pointers, dip::vec2im's constructor is in a private implementation class. dip::vec2im::make is the public interface for creating new instances.
        """
        return _dip_swig.vec2im_make()

    make = staticmethod(make)
    __swig_destroy__ = _dip_swig.delete_vec2im
    __del__ = lambda self : None;
vec2im_swigregister = _dip_swig.vec2im_swigregister
vec2im_swigregister(vec2im)

def vec2im_make():
  """
    vec2im_make() -> vec2im_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dip::vec2im.

    To avoid accidental use of raw pointers, dip::vec2im's constructor is in a private implementation class. dip::vec2im::make is the public interface for creating new instances.
    """
  return _dip_swig.vec2im_make()

class vec2im_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dip::vec2im)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::dip::vec2im)> self) -> vec2im_sptr
        __init__(boost::shared_ptr<(gr::dip::vec2im)> self, vec2im p) -> vec2im_sptr
        """
        this = _dip_swig.new_vec2im_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(vec2im_sptr self) -> vec2im"""
        return _dip_swig.vec2im_sptr___deref__(self)

    __swig_destroy__ = _dip_swig.delete_vec2im_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(vec2im_sptr self) -> vec2im_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dip::vec2im.

        To avoid accidental use of raw pointers, dip::vec2im's constructor is in a private implementation class. dip::vec2im::make is the public interface for creating new instances.
        """
        return _dip_swig.vec2im_sptr_make(self)

    def history(self):
        """history(vec2im_sptr self) -> unsigned int"""
        return _dip_swig.vec2im_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(vec2im_sptr self, int which, int delay)
        declare_sample_delay(vec2im_sptr self, unsigned int delay)
        """
        return _dip_swig.vec2im_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(vec2im_sptr self, int which) -> unsigned int"""
        return _dip_swig.vec2im_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(vec2im_sptr self) -> int"""
        return _dip_swig.vec2im_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(vec2im_sptr self) -> double"""
        return _dip_swig.vec2im_sptr_relative_rate(self)

    def start(self):
        """start(vec2im_sptr self) -> bool"""
        return _dip_swig.vec2im_sptr_start(self)

    def stop(self):
        """stop(vec2im_sptr self) -> bool"""
        return _dip_swig.vec2im_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(vec2im_sptr self, unsigned int which_input) -> uint64_t"""
        return _dip_swig.vec2im_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(vec2im_sptr self, unsigned int which_output) -> uint64_t"""
        return _dip_swig.vec2im_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(vec2im_sptr self) -> int"""
        return _dip_swig.vec2im_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(vec2im_sptr self, int m)"""
        return _dip_swig.vec2im_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(vec2im_sptr self)"""
        return _dip_swig.vec2im_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(vec2im_sptr self) -> bool"""
        return _dip_swig.vec2im_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(vec2im_sptr self, int m)"""
        return _dip_swig.vec2im_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(vec2im_sptr self) -> int"""
        return _dip_swig.vec2im_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(vec2im_sptr self, int i) -> long"""
        return _dip_swig.vec2im_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(vec2im_sptr self, long max_output_buffer)
        set_max_output_buffer(vec2im_sptr self, int port, long max_output_buffer)
        """
        return _dip_swig.vec2im_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(vec2im_sptr self, int i) -> long"""
        return _dip_swig.vec2im_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(vec2im_sptr self, long min_output_buffer)
        set_min_output_buffer(vec2im_sptr self, int port, long min_output_buffer)
        """
        return _dip_swig.vec2im_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(vec2im_sptr self) -> float"""
        return _dip_swig.vec2im_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(vec2im_sptr self) -> float"""
        return _dip_swig.vec2im_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(vec2im_sptr self) -> float"""
        return _dip_swig.vec2im_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(vec2im_sptr self) -> float"""
        return _dip_swig.vec2im_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(vec2im_sptr self) -> float"""
        return _dip_swig.vec2im_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(vec2im_sptr self) -> float"""
        return _dip_swig.vec2im_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(vec2im_sptr self, int which) -> float
        pc_input_buffers_full(vec2im_sptr self) -> pmt_vector_float
        """
        return _dip_swig.vec2im_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(vec2im_sptr self, int which) -> float
        pc_input_buffers_full_avg(vec2im_sptr self) -> pmt_vector_float
        """
        return _dip_swig.vec2im_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(vec2im_sptr self, int which) -> float
        pc_input_buffers_full_var(vec2im_sptr self) -> pmt_vector_float
        """
        return _dip_swig.vec2im_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(vec2im_sptr self, int which) -> float
        pc_output_buffers_full(vec2im_sptr self) -> pmt_vector_float
        """
        return _dip_swig.vec2im_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(vec2im_sptr self, int which) -> float
        pc_output_buffers_full_avg(vec2im_sptr self) -> pmt_vector_float
        """
        return _dip_swig.vec2im_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(vec2im_sptr self, int which) -> float
        pc_output_buffers_full_var(vec2im_sptr self) -> pmt_vector_float
        """
        return _dip_swig.vec2im_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(vec2im_sptr self) -> float"""
        return _dip_swig.vec2im_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(vec2im_sptr self) -> float"""
        return _dip_swig.vec2im_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(vec2im_sptr self) -> float"""
        return _dip_swig.vec2im_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(vec2im_sptr self) -> float"""
        return _dip_swig.vec2im_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(vec2im_sptr self) -> float"""
        return _dip_swig.vec2im_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(vec2im_sptr self, std::vector< std::size_t,std::allocator< std::size_t > > const & mask)"""
        return _dip_swig.vec2im_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(vec2im_sptr self)"""
        return _dip_swig.vec2im_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(vec2im_sptr self) -> std::vector< std::size_t,std::allocator< std::size_t > >"""
        return _dip_swig.vec2im_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(vec2im_sptr self) -> int"""
        return _dip_swig.vec2im_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(vec2im_sptr self) -> int"""
        return _dip_swig.vec2im_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(vec2im_sptr self, int priority) -> int"""
        return _dip_swig.vec2im_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(vec2im_sptr self) -> std::string"""
        return _dip_swig.vec2im_sptr_name(self)

    def symbol_name(self):
        """symbol_name(vec2im_sptr self) -> std::string"""
        return _dip_swig.vec2im_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(vec2im_sptr self) -> io_signature_sptr"""
        return _dip_swig.vec2im_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(vec2im_sptr self) -> io_signature_sptr"""
        return _dip_swig.vec2im_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(vec2im_sptr self) -> long"""
        return _dip_swig.vec2im_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(vec2im_sptr self) -> basic_block_sptr"""
        return _dip_swig.vec2im_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(vec2im_sptr self, int ninputs, int noutputs) -> bool"""
        return _dip_swig.vec2im_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(vec2im_sptr self) -> std::string"""
        return _dip_swig.vec2im_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(vec2im_sptr self, std::string name)"""
        return _dip_swig.vec2im_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(vec2im_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dip_swig.vec2im_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(vec2im_sptr self) -> swig_int_ptr"""
        return _dip_swig.vec2im_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(vec2im_sptr self) -> swig_int_ptr"""
        return _dip_swig.vec2im_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(vec2im_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dip_swig.vec2im_sptr_message_subscribers(self, *args, **kwargs)

vec2im_sptr_swigregister = _dip_swig.vec2im_sptr_swigregister
vec2im_sptr_swigregister(vec2im_sptr)

vec2im_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
vec2im = vec2im.make;

class image_throttle(object):
    """Proxy of C++ gr::dip::image_throttle class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double samples_per_sec, bool ignore_tags) -> image_throttle_sptr"""
        return _dip_swig.image_throttle_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _dip_swig.delete_image_throttle
    __del__ = lambda self : None;
image_throttle_swigregister = _dip_swig.image_throttle_swigregister
image_throttle_swigregister(image_throttle)

def image_throttle_make(*args, **kwargs):
  """image_throttle_make(double samples_per_sec, bool ignore_tags) -> image_throttle_sptr"""
  return _dip_swig.image_throttle_make(*args, **kwargs)

class image_throttle_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dip::image_throttle)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::dip::image_throttle)> self) -> image_throttle_sptr
        __init__(boost::shared_ptr<(gr::dip::image_throttle)> self, image_throttle p) -> image_throttle_sptr
        """
        this = _dip_swig.new_image_throttle_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(image_throttle_sptr self) -> image_throttle"""
        return _dip_swig.image_throttle_sptr___deref__(self)

    __swig_destroy__ = _dip_swig.delete_image_throttle_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(image_throttle_sptr self, double samples_per_sec, bool ignore_tags) -> image_throttle_sptr"""
        return _dip_swig.image_throttle_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(image_throttle_sptr self) -> unsigned int"""
        return _dip_swig.image_throttle_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(image_throttle_sptr self, int which, int delay)
        declare_sample_delay(image_throttle_sptr self, unsigned int delay)
        """
        return _dip_swig.image_throttle_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(image_throttle_sptr self, int which) -> unsigned int"""
        return _dip_swig.image_throttle_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(image_throttle_sptr self) -> int"""
        return _dip_swig.image_throttle_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(image_throttle_sptr self) -> double"""
        return _dip_swig.image_throttle_sptr_relative_rate(self)

    def start(self):
        """start(image_throttle_sptr self) -> bool"""
        return _dip_swig.image_throttle_sptr_start(self)

    def stop(self):
        """stop(image_throttle_sptr self) -> bool"""
        return _dip_swig.image_throttle_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(image_throttle_sptr self, unsigned int which_input) -> uint64_t"""
        return _dip_swig.image_throttle_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(image_throttle_sptr self, unsigned int which_output) -> uint64_t"""
        return _dip_swig.image_throttle_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(image_throttle_sptr self) -> int"""
        return _dip_swig.image_throttle_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(image_throttle_sptr self, int m)"""
        return _dip_swig.image_throttle_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(image_throttle_sptr self)"""
        return _dip_swig.image_throttle_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(image_throttle_sptr self) -> bool"""
        return _dip_swig.image_throttle_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(image_throttle_sptr self, int m)"""
        return _dip_swig.image_throttle_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(image_throttle_sptr self) -> int"""
        return _dip_swig.image_throttle_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(image_throttle_sptr self, int i) -> long"""
        return _dip_swig.image_throttle_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(image_throttle_sptr self, long max_output_buffer)
        set_max_output_buffer(image_throttle_sptr self, int port, long max_output_buffer)
        """
        return _dip_swig.image_throttle_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(image_throttle_sptr self, int i) -> long"""
        return _dip_swig.image_throttle_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(image_throttle_sptr self, long min_output_buffer)
        set_min_output_buffer(image_throttle_sptr self, int port, long min_output_buffer)
        """
        return _dip_swig.image_throttle_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(image_throttle_sptr self) -> float"""
        return _dip_swig.image_throttle_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(image_throttle_sptr self) -> float"""
        return _dip_swig.image_throttle_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(image_throttle_sptr self) -> float"""
        return _dip_swig.image_throttle_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(image_throttle_sptr self) -> float"""
        return _dip_swig.image_throttle_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(image_throttle_sptr self) -> float"""
        return _dip_swig.image_throttle_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(image_throttle_sptr self) -> float"""
        return _dip_swig.image_throttle_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(image_throttle_sptr self, int which) -> float
        pc_input_buffers_full(image_throttle_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_throttle_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(image_throttle_sptr self, int which) -> float
        pc_input_buffers_full_avg(image_throttle_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_throttle_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(image_throttle_sptr self, int which) -> float
        pc_input_buffers_full_var(image_throttle_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_throttle_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(image_throttle_sptr self, int which) -> float
        pc_output_buffers_full(image_throttle_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_throttle_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(image_throttle_sptr self, int which) -> float
        pc_output_buffers_full_avg(image_throttle_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_throttle_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(image_throttle_sptr self, int which) -> float
        pc_output_buffers_full_var(image_throttle_sptr self) -> pmt_vector_float
        """
        return _dip_swig.image_throttle_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(image_throttle_sptr self) -> float"""
        return _dip_swig.image_throttle_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(image_throttle_sptr self) -> float"""
        return _dip_swig.image_throttle_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(image_throttle_sptr self) -> float"""
        return _dip_swig.image_throttle_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(image_throttle_sptr self) -> float"""
        return _dip_swig.image_throttle_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(image_throttle_sptr self) -> float"""
        return _dip_swig.image_throttle_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(image_throttle_sptr self, std::vector< std::size_t,std::allocator< std::size_t > > const & mask)"""
        return _dip_swig.image_throttle_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(image_throttle_sptr self)"""
        return _dip_swig.image_throttle_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(image_throttle_sptr self) -> std::vector< std::size_t,std::allocator< std::size_t > >"""
        return _dip_swig.image_throttle_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(image_throttle_sptr self) -> int"""
        return _dip_swig.image_throttle_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(image_throttle_sptr self) -> int"""
        return _dip_swig.image_throttle_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(image_throttle_sptr self, int priority) -> int"""
        return _dip_swig.image_throttle_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(image_throttle_sptr self) -> std::string"""
        return _dip_swig.image_throttle_sptr_name(self)

    def symbol_name(self):
        """symbol_name(image_throttle_sptr self) -> std::string"""
        return _dip_swig.image_throttle_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(image_throttle_sptr self) -> io_signature_sptr"""
        return _dip_swig.image_throttle_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(image_throttle_sptr self) -> io_signature_sptr"""
        return _dip_swig.image_throttle_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(image_throttle_sptr self) -> long"""
        return _dip_swig.image_throttle_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(image_throttle_sptr self) -> basic_block_sptr"""
        return _dip_swig.image_throttle_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(image_throttle_sptr self, int ninputs, int noutputs) -> bool"""
        return _dip_swig.image_throttle_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(image_throttle_sptr self) -> std::string"""
        return _dip_swig.image_throttle_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(image_throttle_sptr self, std::string name)"""
        return _dip_swig.image_throttle_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(image_throttle_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dip_swig.image_throttle_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(image_throttle_sptr self) -> swig_int_ptr"""
        return _dip_swig.image_throttle_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(image_throttle_sptr self) -> swig_int_ptr"""
        return _dip_swig.image_throttle_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(image_throttle_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dip_swig.image_throttle_sptr_message_subscribers(self, *args, **kwargs)

image_throttle_sptr_swigregister = _dip_swig.image_throttle_sptr_swigregister
image_throttle_sptr_swigregister(image_throttle_sptr)

image_throttle_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
image_throttle = image_throttle.make;



